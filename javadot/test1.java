import edu.princeton.cs.algs4.Graph;
import edu.princeton.cs.algs4.SymbolGraph;
import edu.princeton.cs.algs4.StdOut;

public class GraphProperties {

    private Graph g;
    // B√∫a til breytur fyrir radius, diameret, center og eccentricity...e√∞a ekki √æi√∞ r√°√∞i√∞

    GraphProperties(Graph g) {
        /*
        Upphafsstillir klasa sem reiknar √∫t nokkra eiginleika netsins <g>.
        Neti√∞ <g> skal vera samanhangandi. √ûessi a√∞fer√∞ veldur villu s√© svo ekki.
        */

        // Sko√∞i√∞i Graph klasann. Hva√∞ gerir t.d. g.V() ??
        // Sko√∞i√∞ BreadthFirstPaths klasann, √æa√∞ eru 102 lei√∞ir til a√∞ gera √æetta en √©g nota√∞i √æa√∞.
        // Sko√∞i√∞ smi√∞inn √° honum.. g√¶ti veri√∞ hentugur til a√∞ ath hvort net s√© samhangandi ü§î
        // BreadhFirstPaths hefur l√≠ka hasPathTo fall üòÆ
        // H√©r er l√≠ka f√≠nt a√∞ upphafsstilla eccentricity [] (j√° √æa√∞ er gott a√∞ hafa fylki af eccemtricity fyrir hvern hn√∫t held √©g)
        // bara setja lengd √° √æa√∞, √æa√∞ er upphafsstillt me√∞ null-um

        // H√©r √æarf a√∞ skrifa k√≥√∞a!
        this.g = g;
    }

    public int eccentricity(int v) {
        /*
        Skilar lengd stystu lei√∞ar fr√° hn√∫tnum <v> √≠ <this.g> til √æess hn√∫ts sem lengst er fr√° honum.
        */

        // Ath √æetta fall er nota√∞ √≠ honum f√∂llunum üò¨
        // h√©r v√¶ri t.d. sni√∞ugt a√∞ skila eccentricity √∫r eccentricity fylkinu m.v. int v se mer teki√∞ inn
        // √æetta var alveg sm√° fl√≥ki√∞ getum sko√∞a√∞ √æetta betur allir s√°ttir

        // H√©r √æarf a√∞ skrifa k√≥√∞a!
        return 0;
    }

    public int diameter() {
        /*
        Skilar h√¶sta eccentricity me√∞al allra hn√∫ta √≠ <this.g>.
        */
        // H√©r √æarf a√∞ skrifa k√≥√∞a!
        return 0;
    }

    public int radius() {
        /*
        Skilar l√¶gsta eccentricity me√∞al allra hn√∫ta √≠ <this.g>.
        */
        // H√©r √æarf a√∞ skrifa k√≥√∞a!
        return 0;
    }

    public int center() {
        /*
        Skilar n√∫meri hn√∫ts √≠ <this.g> sem hefur eccentricity = this.radius().
        */
        return 0;
    }

    public static void main(String[] args) {
        SymbolGraph sg = new SymbolGraph("routes.txt", " ");
        GraphProperties gp = new GraphProperties(sg.graph());

        StdOut.println("Eiginleikar lei√∞anetsins:");
        StdOut.println("");
        StdOut.println("√ûverm√°l:   " + gp.diameter());
        StdOut.println("Rad√≠us:    " + gp.radius());
        StdOut.println("Mi√∞hn√∫tur: " + sg.nameOf(gp.center()));
        StdOut.println("");
        StdOut.println(" V√∂llur fr√°vik ");
        StdOut.println("===============");
        for (int v = 0; v < sg.graph().V(); v++) {
            StdOut.println(String.format("  %-5s   %-4d", sg.nameOf(v), gp.eccentricity(v)));
        }
    }

}